@function calcFluidFontSize($f-min, $f-max, $v-min, $v-max) {
  $k: ($f-max - $f-min)/($v-max - $v-min);
  $b: $f-min - $k * $v-min;
  $b: $b *1px;
  $val: calc(#{$k} * 100vw + #{$b});
  @return $val;
}

%fontStyleRoboto {
  font-family: Roboto, sans-serif;
  font-style: normal;
  font-weight: 400;
}

@mixin indentation($props, $sizes...) {
  $list: null;
  $val: null;
  @for $i from 1 through length($sizes) {
    $v-max: null;
    $v-min: null;
    $item: nth($sizes, $i);
    @for $e from 1 through length($item) {
      @if (nth($item, 1))=="!important" {
        $elem: !important;
        $list: append($list, !important, space);
        $val: append($val, !important, space);
      }
      @if (nth($item, 1))==0 {
        $elem: 0;
        $list: append($list, 0, space);
        $val: append($val, 0, space);
      } @else {
        @if $e==2 {
          $v-min: nth($item, 1);
          $v-max: nth($item, $e);
          $elem: calcFluidFontSize($v-min, $v-max, 998, 1500);
          $list: append($list, $elem, space);
          $val: append($val, nth($item, $e)+px, space);
        }
      }
    }
  }
  #{$props}: $list;

  @media (min-width: 1500px) {
    #{$props}: $val;
  }
}

@mixin font($args...) {
  $v-max: null;
  $v-min: null;
  $val: null;
  $subValue: null;
  @for $i from 1 through length($args) {
    @if (nth($args, $i))=="!important" {
      $val: append($val, !important, space);
      $subValue: append($subValue, !important, space);
    } @else {
      $val: append($val, nth($args, $i)+px, space);
      $v-max: nth($args, 1);
      $v-min: nth($args, 1) * 0.75;
      $subValue: append($subValue, calcFluidFontSize($v-min, $v-max, 998, 1500), space);
    }
  }
  font-size: $subValue;
  @media (min-width: 1500px) {
    font-size: $val;
  }
}

@mixin propsSize($prop, $v-min, $v-max, $bool:null) {
  @media (min-width: 1500px) {
    #{$prop}: $v-max *1px;
  }
  #{$prop}: calcFluidFontSize($v-min, $v-max, 998, 1500) $bool;
}

@mixin first-child-row {
  span {
    margin-left: 5px;
    padding: 0;
    width: 21px;
    height: 21px;

    span {
      width: 100%;
      height: 100%;

      input {
        width: 18px;
        height: 18px;
        border: 2px solid #C9CFE3;
        border-radius: 3px;
      }
    }
  }
}

%flexRowCenterCenter {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

%flexRowStartCenter {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
}

%flexRowEndCenter {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-end;
}

%flexRowBetweenCenter {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
}

%flexRowAroundCenter {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-around;
}

%flexRowAroundStart {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: flex-start;
}

%flexColumnCenterCenter {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

%flexColumnStartCenter {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
}

%flexColumnAroundCenter {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
}

%flexColumnBetweenCenter {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
}

%flexColumnCenterEnd {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  justify-content: center;
}
.common-style-form-group{
  @include indentation(padding, 0, (7, 15));
}
.common-style-form-item {
  @include indentation(padding, 0, (10, 20));
  @include propsSize(height, 36, 42);
  @extend %fontStyleRoboto;
  @extend %flexRowStartCenter;
  @include font(13);
  border: 1px solid #E3E7ED;
  color: black;
  border-radius: 4px;
  box-sizing: border-box;

  &::placeholder {
    @extend %fontStyleRoboto;
    @include font(13);
    line-height: 16px;
    color: #B0B3C2;
  }
}
select {
  cursor: pointer;
  background-image: url(../img/angle-down.png) !important;
  background-repeat: no-repeat !important;
  background-size: 10px 10px!important;
  background-position: right 18px center !important;
  appearance: none !important;
}
select:invalid:not(:focus) {
  color: #B0B3C2;
}
select:invalid:focus {
  color: transparent;
}
select:focus option {
  color: initial;
}

.cmn-btn {
  @extend %fontStyleRoboto;
  @include indentation(padding, (0), (15, 30));
  @include font(14);
  @include propsSize(height, 28, 38);
  @extend %flexRowCenterCenter;
  white-space: nowrap;
  border-radius: 6px !important;
  text-transform: uppercase;
  cursor: pointer;
  box-sizing: border-box;
  border: 1px solid transparent;
}

.btn__light {
  color: #7D7D7D;
  border: 1px solid #C9CFE3 !important;
  font-weight: 600;

  &:hover {
    color: #213991;
    border-color: #213991 !important;
  }
}

.btn__dark {
  color: white;
  border: 1px solid #213991;
  background: #213991;

  &:hover {
    color: #213991;
    background: white;

  }
}
